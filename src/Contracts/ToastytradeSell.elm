module Contracts.ToastytradeSell exposing
    ( BuyerStatementLog
    , CommittedEvent
    , GetFullState
    , PhaseChange
    , SellerStatementLog
    , abortedFromDepositDeadlinePassedEvent
    , autorecallAvailable
    , autorecallInterval
    , autoreleaseAvailable
    , autoreleaseInterval
    , burnedEvent
    , buyer
    , buyerDeposit
    , buyerStatementLogDecoder
    , buyerStatementLogEvent
    , committedDecoder
    , committedEvent
    , depositDeadlineInterval
    , depositDeadlinePassed
    , getBalance
    , getFullState
    , getFullStateDecoder
    , logisticsString
    , phase
    , phaseChangeDecoder
    , phaseChangeEvent
    , phaseStartTimestamps
    , poke
    , recalledEvent
    , release
    , releasedEvent
    , seller
    , sellerStatementLogDecoder
    , sellerStatementLogEvent
    )

import Abi.Decode as AbiDecode exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Abi.Encode as AbiEncode exposing (Encoding(..), abiEncode)
import BigInt exposing (BigInt)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator

-}


{-| "autorecallAvailable()" function
-}
autorecallAvailable : Address -> Call Bool
autorecallAvailable contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "autorecallAvailable()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "autorecallInterval()" function
-}
autorecallInterval : Address -> Call BigInt
autorecallInterval contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "autorecallInterval()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "autoreleaseAvailable()" function
-}
autoreleaseAvailable : Address -> Call Bool
autoreleaseAvailable contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "autoreleaseAvailable()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "autoreleaseInterval()" function
-}
autoreleaseInterval : Address -> Call BigInt
autoreleaseInterval contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "autoreleaseInterval()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "buyer()" function
-}
buyer : Address -> Call Address
buyer contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "buyer()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "buyerDeposit()" function
-}
buyerDeposit : Address -> Call BigInt
buyerDeposit contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "buyerDeposit()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "depositDeadlineInterval()" function
-}
depositDeadlineInterval : Address -> Call BigInt
depositDeadlineInterval contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "depositDeadlineInterval()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "depositDeadlinePassed()" function
-}
depositDeadlinePassed : Address -> Call Bool
depositDeadlinePassed contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "depositDeadlinePassed()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "getBalance()" function
-}
getBalance : Address -> Call BigInt
getBalance contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "getBalance()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "getFullState()" function
-}
type alias GetFullState =
    { balance : BigInt
    , phase : BigInt
    , phaseStartTimestamp : BigInt
    , seller : Address
    , buyer : Address
    , buyerDeposit : BigInt
    , autorecallInterval : BigInt
    , depositDeadlineInterval : BigInt
    , autoreleaseInterval : BigInt
    }


getFullState : Address -> Call GetFullState
getFullState contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "getFullState()" []
    , nonce = Nothing
    , decoder = getFullStateDecoder
    }


getFullStateDecoder : Decoder GetFullState
getFullStateDecoder =
    abiDecode GetFullState
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.address
        |> andMap AbiDecode.address
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> toElmDecoder


{-| "logisticsString()" function
-}
logisticsString : Address -> Call String
logisticsString contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "logisticsString()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.string
    }


{-| "phase()" function
-}
phase : Address -> Call BigInt
phase contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "phase()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "phaseStartTimestamps(uint256)" function
-}
phaseStartTimestamps : Address -> BigInt -> Call BigInt
phaseStartTimestamps contractAddress a =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "phaseStartTimestamps(uint256)" [ AbiEncode.uint a ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "poke()" function
-}
poke : Address -> Call ()
poke contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "poke()" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "recall()" function
-}
recall : Address -> Call ()
recall contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "recall()" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "release()" function
-}
release : Address -> Call ()
release contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "release()" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "seller()" function
-}
seller : Address -> Call Address
seller contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "seller()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "AbortedFromDepositDeadlinePassed()" event
-}
abortedFromDepositDeadlinePassedEvent : Address -> LogFilter
abortedFromDepositDeadlinePassedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "AbortedFromDepositDeadlinePassed()" ]
    }


{-| "Burned()" event
-}
burnedEvent : Address -> LogFilter
burnedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Burned()" ]
    }


{-| "BuyerStatementLog(string)" event
-}
type alias BuyerStatementLog =
    { statement : String }


buyerStatementLogEvent : Address -> LogFilter
buyerStatementLogEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "BuyerStatementLog(string)" ]
    }


buyerStatementLogDecoder : Decoder BuyerStatementLog
buyerStatementLogDecoder =
    succeed BuyerStatementLog
        |> custom (data 0 AbiDecode.string)


{-| "Committed(address)" event
-}
type alias CommittedEvent =
    { buyer : Address }


committedEvent : Address -> LogFilter
committedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Committed(address)" ]
    }


committedDecoder : Decoder CommittedEvent
committedDecoder =
    succeed CommittedEvent
        |> custom (data 0 AbiDecode.address)


{-| "PhaseChange(uint8)" event
-}
type alias PhaseChange =
    { newPhase : BigInt }


phaseChangeEvent : Address -> LogFilter
phaseChangeEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "PhaseChange(uint8)" ]
    }


phaseChangeDecoder : Decoder PhaseChange
phaseChangeDecoder =
    succeed PhaseChange
        |> custom (data 0 AbiDecode.uint)


{-| "Recalled()" event
-}
recalledEvent : Address -> LogFilter
recalledEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Recalled()" ]
    }


{-| "Released()" event
-}
releasedEvent : Address -> LogFilter
releasedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Released()" ]
    }


{-| "SellerStatementLog(string)" event
-}
type alias SellerStatementLog =
    { statement : String }


sellerStatementLogEvent : Address -> LogFilter
sellerStatementLogEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "SellerStatementLog(string)" ]
    }


sellerStatementLogDecoder : Decoder SellerStatementLog
sellerStatementLogDecoder =
    succeed SellerStatementLog
        |> custom (data 0 AbiDecode.string)
