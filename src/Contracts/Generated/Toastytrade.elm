module Contracts.Generated.Toastytrade exposing
    ( Committed
    , GetParameters
    , GetState
    , InitiatorStatementLog
    , PhaseChange
    , ResponderStatementLog
    , abort
    , abortedEvent
    , autoabortAvailable
    , autoabortInterval
    , autorecallAvailable
    , autorecallInterval
    , autoreleaseAvailable
    , autoreleaseInterval
    , burn
    , burnedEvent
    , buyer
    , buyerDeposit
    , claim
    , commit
    , committedDecoder
    , committedEvent
    , devFee
    , fiatTransferMethods
    , getBalance
    , getParameters
    , getParametersDecoder
    , getState
    , getStateDecoder
    , initiator
    , initiatorCommPubkey
    , initiatorIsBuyer
    , initiatorStatement
    , initiatorStatementLogDecoder
    , initiatorStatementLogEvent
    , phase
    , phaseChangeDecoder
    , phaseChangeEvent
    , phaseStartTimestamps
    , poke
    , pokeNeeded
    , pokeReward
    , pokeRewardSent
    , recall
    , recalledEvent
    , release
    , releasedEvent
    , responder
    , responderCommPubkey
    , responderDeposit
    , responderStatement
    , responderStatementLogDecoder
    , responderStatementLogEvent
    , seller
    , tokenAmount
    , totalPrice
    )

import Abi.Decode as AbiDecode exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Abi.Encode as AbiEncode exposing (Encoding(..), abiEncode)
import BigInt exposing (BigInt)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator

-}


{-| "abort()" function
-}
abort : Address -> Call ()
abort contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "abort()" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "autoabortAvailable()" function
-}
autoabortAvailable : Address -> Call Bool
autoabortAvailable contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "autoabortAvailable()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "autoabortInterval()" function
-}
autoabortInterval : Address -> Call BigInt
autoabortInterval contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "autoabortInterval()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "autorecallAvailable()" function
-}
autorecallAvailable : Address -> Call Bool
autorecallAvailable contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "autorecallAvailable()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "autorecallInterval()" function
-}
autorecallInterval : Address -> Call BigInt
autorecallInterval contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "autorecallInterval()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "autoreleaseAvailable()" function
-}
autoreleaseAvailable : Address -> Call Bool
autoreleaseAvailable contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "autoreleaseAvailable()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "autoreleaseInterval()" function
-}
autoreleaseInterval : Address -> Call BigInt
autoreleaseInterval contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "autoreleaseInterval()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "burn()" function
-}
burn : Address -> Call ()
burn contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "burn()" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "buyer()" function
-}
buyer : Address -> Call Address
buyer contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "buyer()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "buyerDeposit()" function
-}
buyerDeposit : Address -> Call BigInt
buyerDeposit contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "buyerDeposit()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "claim()" function
-}
claim : Address -> Call ()
claim contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "claim()" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "commit(string)" function
-}
commit : Address -> String -> Call ()
commit contractAddress commPubkey =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "commit(string)" [ AbiEncode.string commPubkey ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "devFee()" function
-}
devFee : Address -> Call BigInt
devFee contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "devFee()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "fiatTransferMethods()" function
-}
fiatTransferMethods : Address -> Call String
fiatTransferMethods contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "fiatTransferMethods()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.string
    }


{-| "getBalance()" function
-}
getBalance : Address -> Call BigInt
getBalance contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "getBalance()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "getParameters()" function
-}
type alias GetParameters =
    { initiator : Address
    , initiatorIsBuyer : Bool
    , tokenAmount : BigInt
    , totalPrice : String
    , buyerDeposit : BigInt
    , autorecallInterval : BigInt
    , autoabortInterval : BigInt
    , autoreleaseInterval : BigInt
    , fiatTransferMethods : String
    , initiatorCommPubkey : String
    , pokeReward : BigInt
    }


getParameters : Address -> Call GetParameters
getParameters contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "getParameters()" []
    , nonce = Nothing
    , decoder = getParametersDecoder
    }


getParametersDecoder : Decoder GetParameters
getParametersDecoder =
    abiDecode GetParameters
        |> andMap AbiDecode.address
        |> andMap AbiDecode.bool
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.string
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.string
        |> andMap AbiDecode.string
        |> andMap AbiDecode.uint
        |> toElmDecoder


{-| "getState()" function
-}
type alias GetState =
    { balance : BigInt
    , phase : BigInt
    , phaseStartTimestamp : BigInt
    , responder : Address
    , responderCommPubkey : String
    }


getState : Address -> Call GetState
getState contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "getState()" []
    , nonce = Nothing
    , decoder = getStateDecoder
    }


getStateDecoder : Decoder GetState
getStateDecoder =
    abiDecode GetState
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.address
        |> andMap AbiDecode.string
        |> toElmDecoder


{-| "initiator()" function
-}
initiator : Address -> Call Address
initiator contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "initiator()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "initiatorCommPubkey()" function
-}
initiatorCommPubkey : Address -> Call String
initiatorCommPubkey contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "initiatorCommPubkey()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.string
    }


{-| "initiatorIsBuyer()" function
-}
initiatorIsBuyer : Address -> Call Bool
initiatorIsBuyer contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "initiatorIsBuyer()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "initiatorStatement(string,string)" function
-}
initiatorStatement : Address -> String -> String -> Call ()
initiatorStatement contractAddress encryptedForInitiator encryptedForResponder =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "initiatorStatement(string,string)" [ AbiEncode.string encryptedForInitiator, AbiEncode.string encryptedForResponder ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "phase()" function
-}
phase : Address -> Call BigInt
phase contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "phase()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "phaseStartTimestamps(uint256)" function
-}
phaseStartTimestamps : Address -> BigInt -> Call BigInt
phaseStartTimestamps contractAddress a =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "phaseStartTimestamps(uint256)" [ AbiEncode.uint a ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "poke()" function
-}
poke : Address -> Call Bool
poke contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "poke()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "pokeNeeded()" function
-}
pokeNeeded : Address -> Call Bool
pokeNeeded contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "pokeNeeded()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "pokeReward()" function
-}
pokeReward : Address -> Call BigInt
pokeReward contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "pokeReward()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "pokeRewardSent()" function
-}
pokeRewardSent : Address -> Call Bool
pokeRewardSent contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "pokeRewardSent()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.bool
    }


{-| "recall()" function
-}
recall : Address -> Call ()
recall contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "recall()" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "release()" function
-}
release : Address -> Call ()
release contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "release()" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "responder()" function
-}
responder : Address -> Call Address
responder contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "responder()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "responderCommPubkey()" function
-}
responderCommPubkey : Address -> Call String
responderCommPubkey contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "responderCommPubkey()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.string
    }


{-| "responderDeposit()" function
-}
responderDeposit : Address -> Call BigInt
responderDeposit contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "responderDeposit()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "responderStatement(string,string)" function
-}
responderStatement : Address -> String -> String -> Call ()
responderStatement contractAddress encryptedForInitiator encryptedForResponder =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "responderStatement(string,string)" [ AbiEncode.string encryptedForInitiator, AbiEncode.string encryptedForResponder ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "seller()" function
-}
seller : Address -> Call Address
seller contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "seller()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "tokenAmount()" function
-}
tokenAmount : Address -> Call BigInt
tokenAmount contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "tokenAmount()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "totalPrice()" function
-}
totalPrice : Address -> Call String
totalPrice contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "totalPrice()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.string
    }


{-| "Aborted()" event
-}
abortedEvent : Address -> LogFilter
abortedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Aborted()" ]
    }


{-| "Burned()" event
-}
burnedEvent : Address -> LogFilter
burnedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Burned()" ]
    }


{-| "Committed(address)" event
-}
type alias Committed =
    { responder : Address }


committedEvent : Address -> LogFilter
committedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Committed(address)" ]
    }


committedDecoder : Decoder Committed
committedDecoder =
    succeed Committed
        |> custom (data 0 AbiDecode.address)


{-| "InitiatorStatementLog(string,string)" event
-}
type alias InitiatorStatementLog =
    { encryptedForInitiator : String
    , encryptedForResponder : String
    }


initiatorStatementLogEvent : Address -> LogFilter
initiatorStatementLogEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "InitiatorStatementLog(string,string)" ]
    }


initiatorStatementLogDecoder : Decoder InitiatorStatementLog
initiatorStatementLogDecoder =
    succeed InitiatorStatementLog
        |> custom (data 0 AbiDecode.string)
        |> custom (data 1 AbiDecode.string)


{-| "PhaseChange(uint8)" event
-}
type alias PhaseChange =
    { newPhase : BigInt }


phaseChangeEvent : Address -> LogFilter
phaseChangeEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "PhaseChange(uint8)" ]
    }


phaseChangeDecoder : Decoder PhaseChange
phaseChangeDecoder =
    succeed PhaseChange
        |> custom (data 0 AbiDecode.uint)


{-| "Recalled()" event
-}
recalledEvent : Address -> LogFilter
recalledEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Recalled()" ]
    }


{-| "Released()" event
-}
releasedEvent : Address -> LogFilter
releasedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "Released()" ]
    }


{-| "ResponderStatementLog(string,string)" event
-}
type alias ResponderStatementLog =
    { encryptedForInitiator : String
    , encryptedForResponder : String
    }


responderStatementLogEvent : Address -> LogFilter
responderStatementLogEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.keccak256 "ResponderStatementLog(string,string)" ]
    }


responderStatementLogDecoder : Decoder ResponderStatementLog
responderStatementLogDecoder =
    succeed ResponderStatementLog
        |> custom (data 0 AbiDecode.string)
        |> custom (data 1 AbiDecode.string)
